globalThis.process ??= {}; globalThis.process.env ??= {};
import { d as createVNode, F as Fragment, _ as __astro_tag_component__ } from './astro/server_BfFDGVc7.mjs';

const frontmatter = {
  "title": "Custom Tools",
  "description": "Create tools the LLM can call in opencode."
};
function getHeadings() {
  return [{
    "depth": 2,
    "slug": "creating-a-tool",
    "text": "Creating a tool"
  }, {
    "depth": 3,
    "slug": "location",
    "text": "Location"
  }, {
    "depth": 3,
    "slug": "structure",
    "text": "Structure"
  }, {
    "depth": 3,
    "slug": "arguments",
    "text": "Arguments"
  }, {
    "depth": 2,
    "slug": "context",
    "text": "Context"
  }, {
    "depth": 2,
    "slug": "multiple-tools-per-file",
    "text": "Multiple tools per file"
  }];
}
function _createMdxContent(props) {
  const {Fragment} = props.components || ({});
  if (!Fragment) _missingMdxReference("Fragment");
  return createVNode(Fragment, {
    "set:html": "<p>Custom tools are functions you create that the LLM can call during conversations. They work alongside opencodeâ€™s <a href=\"/docs/tools\">built-in tools</a> like <code dir=\"auto\">read</code>, <code dir=\"auto\">write</code>, and <code dir=\"auto\">bash</code>.</p>\n<hr>\n<h2 id=\"creating-a-tool\"><a href=\"#creating-a-tool\">Creating a tool</a></h2>\n<p>Tools are defined as <strong>TypeScript</strong> or <strong>JavaScript</strong> files.</p>\n<hr>\n<h3 id=\"location\"><a href=\"#location\">Location</a></h3>\n<p>They can be defined:</p>\n<ul>\n<li>Locally by placing them in the <code dir=\"auto\">.opencode/tool/</code> directory of your project.</li>\n<li>Or globally, by placing them in <code dir=\"auto\">~/.config/opencode/tool/</code>.</li>\n</ul>\n<hr>\n<h3 id=\"structure\"><a href=\"#structure\">Structure</a></h3>\n<p>The easiest way to create tools is using the <code dir=\"auto\">tool()</code> helper which provides type-safety and validation.</p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/docs/_astro/ec.4c0k7.css\"><script type=\"module\" src=\"/docs/_astro/ec.p1z7b.js\"></script><figure class=\"frame has-title not-content\"><figcaption class=\"header\"><span class=\"title\">.opencode/tool/database.ts</span></figcaption><pre data-language=\"ts\"><code><div class=\"ec-line highlight mark\"><div class=\"code\"><span style=\"--0:#8f2731;--1:#fb9fa9\">import</span><span style=\"--0:#24292E;--1:#E1E4E8\"> { tool } </span><span style=\"--0:#8f2731;--1:#fb9fa9\">from</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"@opencode-ai/plugin\"</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#BF3441;--1:#F97583\">export</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#BF3441;--1:#F97583\">default</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#6F42C1;--1:#B392F0\">tool</span><span style=\"--0:#24292E;--1:#E1E4E8\">({</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">description: </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"Query the project database\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">args: {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">    </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">query: tool.schema.</span><span style=\"--0:#6F42C1;--1:#B392F0\">string</span><span style=\"--0:#24292E;--1:#E1E4E8\">().</span><span style=\"--0:#6F42C1;--1:#B392F0\">describe</span><span style=\"--0:#24292E;--1:#E1E4E8\">(</span><span style=\"--0:#032F62;--1:#9ECBFF\">\"SQL query to execute\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">),</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">},</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#BF3441;--1:#F97583\">async</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#6F42C1;--1:#B392F0\">execute</span><span style=\"--0:#24292E;--1:#E1E4E8\">(</span><span style=\"--0:#AE4B07;--1:#FFAB70\">args</span><span style=\"--0:#24292E;--1:#E1E4E8\">) {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#616972;--1:#99A0A6\">// Your database logic here</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#BF3441;--1:#F97583\">return</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#032F62;--1:#9ECBFF\">`Executed query: ${</span><span style=\"--0:#24292E;--1:#E1E4E8\">args</span><span style=\"--0:#032F62;--1:#9ECBFF\">.</span><span style=\"--0:#24292E;--1:#E1E4E8\">query</span><span style=\"--0:#032F62;--1:#9ECBFF\">}`</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">},</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">})</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import { tool } from &#x22;@opencode-ai/plugin&#x22;export default tool({  description: &#x22;Query the project database&#x22;,  args: {    query: tool.schema.string().describe(&#x22;SQL query to execute&#x22;),  },  async execute(args) {    // Your database logic here    return &#x60;Executed query: ${args.query}&#x60;  },})\"><div></div></button></div></figure></div>\n<p>The <strong>filename</strong> becomes the <strong>tool name</strong>. The above creates a <code dir=\"auto\">database</code> tool.</p>\n<hr>\n<h3 id=\"arguments\"><a href=\"#arguments\">Arguments</a></h3>\n<p>You can use <code dir=\"auto\">tool.schema</code>, which is just <a href=\"https://zod.dev\">Zod</a>, to define argument types.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"ts\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#6F42C1;--1:#B392F0\">args</span><span style=\"--0:#24292E;--1:#E1E4E8\">: {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#6F42C1;--1:#B392F0\">query</span><span style=\"--0:#24292E;--1:#E1E4E8\">: </span><mark><span style=\"--0:#24292E;--1:#E1E4E8\">tool.schema</span></mark><span style=\"--0:#24292E;--1:#E1E4E8\">.</span><span style=\"--0:#6F42C1;--1:#B392F0\">string</span><span style=\"--0:#24292E;--1:#E1E4E8\">().</span><span style=\"--0:#6F42C1;--1:#B392F0\">describe</span><span style=\"--0:#24292E;--1:#E1E4E8\">(</span><span style=\"--0:#032F62;--1:#9ECBFF\">\"SQL query to execute\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"args: {  query: tool.schema.string().describe(&#x22;SQL query to execute&#x22;)}\"><div></div></button></div></figure></div>\n<p>You can also import <a href=\"https://zod.dev\">Zod</a> directly and return a plain object:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"ts\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#BF3441;--1:#F97583\">import</span><span style=\"--0:#24292E;--1:#E1E4E8\"> { z } </span><span style=\"--0:#BF3441;--1:#F97583\">from</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"zod\"</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#BF3441;--1:#F97583\">export</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#BF3441;--1:#F97583\">default</span><span style=\"--0:#24292E;--1:#E1E4E8\"> {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">description: </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"Tool description\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">args: {</span></div></div><div class=\"ec-line highlight mark\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">    </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">param: z.</span><span style=\"--0:#5c37a0;--1:#c5acf4\">string</span><span style=\"--0:#24292E;--1:#E1E4E8\">().</span><span style=\"--0:#5c37a0;--1:#c5acf4\">describe</span><span style=\"--0:#24292E;--1:#E1E4E8\">(</span><span style=\"--0:#032F62;--1:#9ECBFF\">\"Parameter description\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">),</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">},</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#BF3441;--1:#F97583\">async</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#6F42C1;--1:#B392F0\">execute</span><span style=\"--0:#24292E;--1:#E1E4E8\">(</span><span style=\"--0:#AE4B07;--1:#FFAB70\">args</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#AE4B07;--1:#FFAB70\">context</span><span style=\"--0:#24292E;--1:#E1E4E8\">) {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#616972;--1:#99A0A6\">// Tool implementation</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#BF3441;--1:#F97583\">return</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"result\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">},</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import { z } from &#x22;zod&#x22;export default {  description: &#x22;Tool description&#x22;,  args: {    param: z.string().describe(&#x22;Parameter description&#x22;),  },  async execute(args, context) {    // Tool implementation    return &#x22;result&#x22;  },}\"><div></div></button></div></figure></div>\n<hr>\n<h2 id=\"context\"><a href=\"#context\">Context</a></h2>\n<p>Tools receive context about the current session:</p>\n<div class=\"expressive-code\"><figure class=\"frame has-title not-content\"><figcaption class=\"header\"><span class=\"title\">.opencode/tool/project.ts</span></figcaption><pre data-language=\"ts\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#BF3441;--1:#F97583\">import</span><span style=\"--0:#24292E;--1:#E1E4E8\"> { tool } </span><span style=\"--0:#BF3441;--1:#F97583\">from</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"@opencode-ai/plugin\"</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#BF3441;--1:#F97583\">export</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#BF3441;--1:#F97583\">default</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#6F42C1;--1:#B392F0\">tool</span><span style=\"--0:#24292E;--1:#E1E4E8\">({</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">description: </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"Get project information\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">args: {},</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#BF3441;--1:#F97583\">async</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#6F42C1;--1:#B392F0\">execute</span><span style=\"--0:#24292E;--1:#E1E4E8\">(</span><span style=\"--0:#AE4B07;--1:#FFAB70\">args</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#AE4B07;--1:#FFAB70\">context</span><span style=\"--0:#24292E;--1:#E1E4E8\">) {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#616972;--1:#99A0A6\">// Access context information</span></div></div><div class=\"ec-line highlight mark\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#8f2731;--1:#fb9fa9\">const</span><span style=\"--0:#24292E;--1:#E1E4E8\"> { </span><span style=\"--0:#004ba0;--1:#81bcff\">agent</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#004ba0;--1:#81bcff\">sessionID</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#004ba0;--1:#81bcff\">messageID</span><span style=\"--0:#24292E;--1:#E1E4E8\"> } </span><span style=\"--0:#8f2731;--1:#fb9fa9\">=</span><span style=\"--0:#24292E;--1:#E1E4E8\"> context</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#BF3441;--1:#F97583\">return</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#032F62;--1:#9ECBFF\">`Agent: ${</span><span style=\"--0:#24292E;--1:#E1E4E8\">agent</span><span style=\"--0:#032F62;--1:#9ECBFF\">}, Session: ${</span><span style=\"--0:#24292E;--1:#E1E4E8\">sessionID</span><span style=\"--0:#032F62;--1:#9ECBFF\">}, Message: ${</span><span style=\"--0:#24292E;--1:#E1E4E8\">messageID</span><span style=\"--0:#032F62;--1:#9ECBFF\">}`</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">},</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">})</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import { tool } from &#x22;@opencode-ai/plugin&#x22;export default tool({  description: &#x22;Get project information&#x22;,  args: {},  async execute(args, context) {    // Access context information    const { agent, sessionID, messageID } = context    return &#x60;Agent: ${agent}, Session: ${sessionID}, Message: ${messageID}&#x60;  },})\"><div></div></button></div></figure></div>\n<hr>\n<h2 id=\"multiple-tools-per-file\"><a href=\"#multiple-tools-per-file\">Multiple tools per file</a></h2>\n<p>You can also export multiple tools from a single file. Each export becomes <strong>a separate tool</strong> with the name <strong><code dir=\"auto\">&#x3C;filename>_&#x3C;exportname></code></strong>:</p>\n<div class=\"expressive-code\"><figure class=\"frame has-title not-content\"><figcaption class=\"header\"><span class=\"title\">.opencode/tool/math.ts</span></figcaption><pre data-language=\"ts\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#BF3441;--1:#F97583\">import</span><span style=\"--0:#24292E;--1:#E1E4E8\"> { tool } </span><span style=\"--0:#BF3441;--1:#F97583\">from</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"@opencode-ai/plugin\"</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#BF3441;--1:#F97583\">export</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#BF3441;--1:#F97583\">const</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#005CC5;--1:#79B8FF\">add</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#BF3441;--1:#F97583\">=</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#6F42C1;--1:#B392F0\">tool</span><span style=\"--0:#24292E;--1:#E1E4E8\">({</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">description: </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"Add two numbers\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">args: {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">    </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">a: tool.schema.</span><span style=\"--0:#6F42C1;--1:#B392F0\">number</span><span style=\"--0:#24292E;--1:#E1E4E8\">().</span><span style=\"--0:#6F42C1;--1:#B392F0\">describe</span><span style=\"--0:#24292E;--1:#E1E4E8\">(</span><span style=\"--0:#032F62;--1:#9ECBFF\">\"First number\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">),</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">    </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">b: tool.schema.</span><span style=\"--0:#6F42C1;--1:#B392F0\">number</span><span style=\"--0:#24292E;--1:#E1E4E8\">().</span><span style=\"--0:#6F42C1;--1:#B392F0\">describe</span><span style=\"--0:#24292E;--1:#E1E4E8\">(</span><span style=\"--0:#032F62;--1:#9ECBFF\">\"Second number\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">),</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">},</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#BF3441;--1:#F97583\">async</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#6F42C1;--1:#B392F0\">execute</span><span style=\"--0:#24292E;--1:#E1E4E8\">(</span><span style=\"--0:#AE4B07;--1:#FFAB70\">args</span><span style=\"--0:#24292E;--1:#E1E4E8\">) {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#BF3441;--1:#F97583\">return</span><span style=\"--0:#24292E;--1:#E1E4E8\"> args.a </span><span style=\"--0:#BF3441;--1:#F97583\">+</span><span style=\"--0:#24292E;--1:#E1E4E8\"> args.b</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">},</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">})</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#BF3441;--1:#F97583\">export</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#BF3441;--1:#F97583\">const</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#005CC5;--1:#79B8FF\">multiply</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#BF3441;--1:#F97583\">=</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#6F42C1;--1:#B392F0\">tool</span><span style=\"--0:#24292E;--1:#E1E4E8\">({</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">description: </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"Multiply two numbers\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">args: {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">    </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">a: tool.schema.</span><span style=\"--0:#6F42C1;--1:#B392F0\">number</span><span style=\"--0:#24292E;--1:#E1E4E8\">().</span><span style=\"--0:#6F42C1;--1:#B392F0\">describe</span><span style=\"--0:#24292E;--1:#E1E4E8\">(</span><span style=\"--0:#032F62;--1:#9ECBFF\">\"First number\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">),</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">    </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">b: tool.schema.</span><span style=\"--0:#6F42C1;--1:#B392F0\">number</span><span style=\"--0:#24292E;--1:#E1E4E8\">().</span><span style=\"--0:#6F42C1;--1:#B392F0\">describe</span><span style=\"--0:#24292E;--1:#E1E4E8\">(</span><span style=\"--0:#032F62;--1:#9ECBFF\">\"Second number\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">),</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">},</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#BF3441;--1:#F97583\">async</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#6F42C1;--1:#B392F0\">execute</span><span style=\"--0:#24292E;--1:#E1E4E8\">(</span><span style=\"--0:#AE4B07;--1:#FFAB70\">args</span><span style=\"--0:#24292E;--1:#E1E4E8\">) {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#BF3441;--1:#F97583\">return</span><span style=\"--0:#24292E;--1:#E1E4E8\"> args.a </span><span style=\"--0:#BF3441;--1:#F97583\">*</span><span style=\"--0:#24292E;--1:#E1E4E8\"> args.b</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">},</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">})</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import { tool } from &#x22;@opencode-ai/plugin&#x22;export const add = tool({  description: &#x22;Add two numbers&#x22;,  args: {    a: tool.schema.number().describe(&#x22;First number&#x22;),    b: tool.schema.number().describe(&#x22;Second number&#x22;),  },  async execute(args) {    return args.a + args.b  },})export const multiply = tool({  description: &#x22;Multiply two numbers&#x22;,  args: {    a: tool.schema.number().describe(&#x22;First number&#x22;),    b: tool.schema.number().describe(&#x22;Second number&#x22;),  },  async execute(args) {    return args.a * args.b  },})\"><div></div></button></div></figure></div>\n<p>This creates two tools: <code dir=\"auto\">math_add</code> and <code dir=\"auto\">math_multiply</code>.</p>"
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? createVNode(MDXLayout, {
    ...props,
    children: createVNode(_createMdxContent, {
      ...props
    })
  }) : _createMdxContent(props);
}
function _missingMdxReference(id, component) {
  throw new Error("Expected " + ("component" ) + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
const url = "src/content/docs/custom-tools.mdx";
const file = "/home/josh/projects/sst/opencode/packages/web/src/content/docs/custom-tools.mdx";
const Content = (props = {}) => MDXContent({
  ...props,
  components: { Fragment: Fragment, ...props.components, },
});
Content[Symbol.for('mdx-component')] = true;
Content[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter.layout);
Content.moduleId = "/home/josh/projects/sst/opencode/packages/web/src/content/docs/custom-tools.mdx";
__astro_tag_component__(Content, 'astro:jsx');

export { Content, Content as default, file, frontmatter, getHeadings, url };
