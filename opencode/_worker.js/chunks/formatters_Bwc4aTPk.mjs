globalThis.process ??= {}; globalThis.process.env ??= {};
import { d as createVNode, F as Fragment, _ as __astro_tag_component__ } from './astro/server_BfFDGVc7.mjs';

const frontmatter = {
  "title": "Formatters",
  "description": "OpenCode uses language specific formatters."
};
function getHeadings() {
  return [{
    "depth": 2,
    "slug": "built-in",
    "text": "Built-in"
  }, {
    "depth": 2,
    "slug": "how-it-works",
    "text": "How it works"
  }, {
    "depth": 2,
    "slug": "configure",
    "text": "Configure"
  }, {
    "depth": 3,
    "slug": "disabling-formatters",
    "text": "Disabling formatters"
  }, {
    "depth": 3,
    "slug": "custom-formatters",
    "text": "Custom formatters"
  }];
}
function _createMdxContent(props) {
  const {Fragment} = props.components || ({});
  if (!Fragment) _missingMdxReference("Fragment");
  return createVNode(Fragment, {
    "set:html": "<p>OpenCode automatically formats files after they are written or edited using language-specific formatters. This ensures that the code that is generated follows the code styles of your project.</p>\n<hr>\n<h2 id=\"built-in\"><a href=\"#built-in\">Built-in</a></h2>\n<p>OpenCode comes with several built-in formatters for popular languages and frameworks. Below is a list of the formatters, supported file extensions, and commands or config options it needs.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Formatter</th><th>Extensions</th><th>Requirements</th></tr></thead><tbody><tr><td>gofmt</td><td>.go</td><td><code dir=\"auto\">gofmt</code> command available</td></tr><tr><td>mix</td><td>.ex, .exs, .eex, .heex, .leex, .neex, .sface</td><td><code dir=\"auto\">mix</code> command available</td></tr><tr><td>prettier</td><td>.js, .jsx, .ts, .tsx, .html, .css, .md, .json, .yaml, and <a href=\"https://prettier.io/docs/en/index.html\">more</a></td><td><code dir=\"auto\">prettier</code> dependency in <code dir=\"auto\">package.json</code></td></tr><tr><td>biome</td><td>.js, .jsx, .ts, .tsx, .html, .css, .md, .json, .yaml, and <a href=\"https://biomejs.dev/\">more</a></td><td><code dir=\"auto\">biome.json(c)</code> config file</td></tr><tr><td>zig</td><td>.zig, .zon</td><td><code dir=\"auto\">zig</code> command available</td></tr><tr><td>clang-format</td><td>.c, .cpp, .h, .hpp, .ino, and <a href=\"https://clang.llvm.org/docs/ClangFormat.html\">more</a></td><td><code dir=\"auto\">.clang-format</code> config file</td></tr><tr><td>ktlint</td><td>.kt, .kts</td><td><code dir=\"auto\">ktlint</code> command available</td></tr><tr><td>ruff</td><td>.py, .pyi</td><td><code dir=\"auto\">ruff</code> command available with config</td></tr><tr><td>rubocop</td><td>.rb, .rake, .gemspec, .ru</td><td><code dir=\"auto\">rubocop</code> command available</td></tr><tr><td>standardrb</td><td>.rb, .rake, .gemspec, .ru</td><td><code dir=\"auto\">standardrb</code> command available</td></tr><tr><td>htmlbeautifier</td><td>.erb, .html.erb</td><td><code dir=\"auto\">htmlbeautifier</code> command available</td></tr></tbody></table>\n<p>So if your project has <code dir=\"auto\">prettier</code> in your <code dir=\"auto\">package.json</code>, OpenCode will automatically use it.</p>\n<hr>\n<h2 id=\"how-it-works\"><a href=\"#how-it-works\">How it works</a></h2>\n<p>When OpenCode writes or edits a file, it:</p>\n<ol>\n<li>Checks the file extension against all enabled formatters.</li>\n<li>Runs the appropriate formatter command on the file.</li>\n<li>Applies the formatting changes automatically.</li>\n</ol>\n<p>This process happens in the background, ensuring your code styles are maintained without any manual steps.</p>\n<hr>\n<h2 id=\"configure\"><a href=\"#configure\">Configure</a></h2>\n<p>You can customize formatters through the <code dir=\"auto\">formatter</code> section in your OpenCode config.</p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/docs/_astro/ec.4c0k7.css\"><script type=\"module\" src=\"/docs/_astro/ec.p1z7b.js\"></script><figure class=\"frame has-title not-content\"><figcaption class=\"header\"><span class=\"title\">opencode.json</span></figcaption><pre data-language=\"json\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#005CC5;--1:#79B8FF\">\"$schema\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">: </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"https://opencode.ai/config.json\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#005CC5;--1:#79B8FF\">\"formatter\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">: {}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"{  &#x22;$schema&#x22;: &#x22;https://opencode.ai/config.json&#x22;,  &#x22;formatter&#x22;: {}}\"><div></div></button></div></figure></div>\n<p>Each formatter configuration supports the following:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code dir=\"auto\">disabled</code></td><td>boolean</td><td>Set this to <code dir=\"auto\">true</code> to disable the formatter</td></tr><tr><td><code dir=\"auto\">command</code></td><td>string[]</td><td>The command to run for formatting</td></tr><tr><td><code dir=\"auto\">environment</code></td><td>object</td><td>Environment variables to set when running the formatter</td></tr><tr><td><code dir=\"auto\">extensions</code></td><td>string[]</td><td>File extensions this formatter should handle</td></tr></tbody></table>\n<p>Letâ€™s look at some examples.</p>\n<hr>\n<h3 id=\"disabling-formatters\"><a href=\"#disabling-formatters\">Disabling formatters</a></h3>\n<p>To disable a specific formatter, set <code dir=\"auto\">disabled</code> to <code dir=\"auto\">true</code>:</p>\n<div class=\"expressive-code\"><figure class=\"frame has-title not-content\"><figcaption class=\"header\"><span class=\"title\">opencode.json</span></figcaption><pre data-language=\"json\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#005CC5;--1:#79B8FF\">\"$schema\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">: </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"https://opencode.ai/config.json\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#005CC5;--1:#79B8FF\">\"formatter\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">: {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#005CC5;--1:#79B8FF\">\"prettier\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">: {</span></div></div><div class=\"ec-line highlight mark\"><div class=\"code\"><span class=\"indent\">      </span><span style=\"--0:#004ba0;--1:#81bcff\">\"disabled\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">: </span><span style=\"--0:#004ba0;--1:#81bcff\">true</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">    </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"{  &#x22;$schema&#x22;: &#x22;https://opencode.ai/config.json&#x22;,  &#x22;formatter&#x22;: {    &#x22;prettier&#x22;: {      &#x22;disabled&#x22;: true    }  }}\"><div></div></button></div></figure></div>\n<hr>\n<h3 id=\"custom-formatters\"><a href=\"#custom-formatters\">Custom formatters</a></h3>\n<p>You can override the built-in formatters or add new ones by specifying the command, environment variables, and file extensions:</p>\n<div class=\"expressive-code\"><figure class=\"frame has-title not-content\"><figcaption class=\"header\"><span class=\"title\">opencode.json</span></figcaption><pre data-language=\"json\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#005CC5;--1:#79B8FF\">\"$schema\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">: </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"https://opencode.ai/config.json\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#005CC5;--1:#79B8FF\">\"formatter\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">: {</span></div></div><div class=\"ec-line highlight mark\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#004ba0;--1:#81bcff\">\"prettier\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">: {</span></div></div><div class=\"ec-line highlight mark\"><div class=\"code\"><span class=\"indent\">      </span><span style=\"--0:#004ba0;--1:#81bcff\">\"command\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">: [</span><span style=\"--0:#032F62;--1:#9ECBFF\">\"npx\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"prettier\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"--write\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"$FILE\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">],</span></div></div><div class=\"ec-line highlight mark\"><div class=\"code\"><span class=\"indent\">      </span><span style=\"--0:#004ba0;--1:#81bcff\">\"environment\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">: {</span></div></div><div class=\"ec-line highlight mark\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#004ba0;--1:#81bcff\">\"NODE_ENV\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">: </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"development\"</span></div></div><div class=\"ec-line highlight mark\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">      </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">},</span></div></div><div class=\"ec-line highlight mark\"><div class=\"code\"><span class=\"indent\">      </span><span style=\"--0:#004ba0;--1:#81bcff\">\"extensions\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">: [</span><span style=\"--0:#032F62;--1:#9ECBFF\">\".js\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#032F62;--1:#9ECBFF\">\".ts\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#032F62;--1:#9ECBFF\">\".jsx\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#032F62;--1:#9ECBFF\">\".tsx\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">]</span></div></div><div class=\"ec-line highlight mark\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">    </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">},</span></div></div><div class=\"ec-line highlight mark\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#004ba0;--1:#81bcff\">\"custom-markdown-formatter\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">: {</span></div></div><div class=\"ec-line highlight mark\"><div class=\"code\"><span class=\"indent\">      </span><span style=\"--0:#004ba0;--1:#81bcff\">\"command\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">: [</span><span style=\"--0:#032F62;--1:#9ECBFF\">\"deno\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"fmt\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"$FILE\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">],</span></div></div><div class=\"ec-line highlight mark\"><div class=\"code\"><span class=\"indent\">      </span><span style=\"--0:#004ba0;--1:#81bcff\">\"extensions\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">: [</span><span style=\"--0:#032F62;--1:#9ECBFF\">\".md\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">]</span></div></div><div class=\"ec-line highlight mark\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">    </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"{  &#x22;$schema&#x22;: &#x22;https://opencode.ai/config.json&#x22;,  &#x22;formatter&#x22;: {    &#x22;prettier&#x22;: {      &#x22;command&#x22;: [&#x22;npx&#x22;, &#x22;prettier&#x22;, &#x22;--write&#x22;, &#x22;$FILE&#x22;],      &#x22;environment&#x22;: {        &#x22;NODE_ENV&#x22;: &#x22;development&#x22;      },      &#x22;extensions&#x22;: [&#x22;.js&#x22;, &#x22;.ts&#x22;, &#x22;.jsx&#x22;, &#x22;.tsx&#x22;]    },    &#x22;custom-markdown-formatter&#x22;: {      &#x22;command&#x22;: [&#x22;deno&#x22;, &#x22;fmt&#x22;, &#x22;$FILE&#x22;],      &#x22;extensions&#x22;: [&#x22;.md&#x22;]    }  }}\"><div></div></button></div></figure></div>\n<p>The <strong><code dir=\"auto\">$FILE</code> placeholder</strong> in the command will be replaced with the path to the file being formatted.</p>"
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? createVNode(MDXLayout, {
    ...props,
    children: createVNode(_createMdxContent, {
      ...props
    })
  }) : _createMdxContent(props);
}
function _missingMdxReference(id, component) {
  throw new Error("Expected " + ("component" ) + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
const url = "src/content/docs/formatters.mdx";
const file = "/home/josh/projects/sst/opencode/packages/web/src/content/docs/formatters.mdx";
const Content = (props = {}) => MDXContent({
  ...props,
  components: { Fragment: Fragment, ...props.components, },
});
Content[Symbol.for('mdx-component')] = true;
Content[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter.layout);
Content.moduleId = "/home/josh/projects/sst/opencode/packages/web/src/content/docs/formatters.mdx";
__astro_tag_component__(Content, 'astro:jsx');

export { Content, Content as default, file, frontmatter, getHeadings, url };
