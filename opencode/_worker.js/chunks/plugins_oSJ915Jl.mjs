globalThis.process ??= {}; globalThis.process.env ??= {};
import { d as createVNode, F as Fragment, _ as __astro_tag_component__ } from './astro/server_BfFDGVc7.mjs';

const frontmatter = {
  "title": "Plugins",
  "description": "Write your own plugins to extend OpenCode."
};
function getHeadings() {
  return [{
    "depth": 2,
    "slug": "create-a-plugin",
    "text": "Create a plugin"
  }, {
    "depth": 3,
    "slug": "location",
    "text": "Location"
  }, {
    "depth": 3,
    "slug": "basic-structure",
    "text": "Basic structure"
  }, {
    "depth": 3,
    "slug": "typescript-support",
    "text": "TypeScript support"
  }, {
    "depth": 2,
    "slug": "examples",
    "text": "Examples"
  }, {
    "depth": 3,
    "slug": "send-notifications",
    "text": "Send notifications"
  }, {
    "depth": 3,
    "slug": "env-protection",
    "text": ".env protection"
  }, {
    "depth": 3,
    "slug": "custom-tools",
    "text": "Custom tools"
  }];
}
function _createMdxContent(props) {
  const {Fragment} = props.components || ({});
  if (!Fragment) _missingMdxReference("Fragment");
  return createVNode(Fragment, {
    "set:html": "<p>Plugins allow you to extend OpenCode by hooking into various events and customizing behavior. You can create plugins to add new features, integrate with external services, or modify OpenCode’s default behavior.</p>\n<hr>\n<h2 id=\"create-a-plugin\"><a href=\"#create-a-plugin\">Create a plugin</a></h2>\n<p>A plugin is a <strong>JavaScript/TypeScript module</strong> that exports one or more plugin\nfunctions. Each function receives a context object and returns a hooks object.</p>\n<hr>\n<h3 id=\"location\"><a href=\"#location\">Location</a></h3>\n<p>Plugins are loaded from:</p>\n<ol>\n<li><code dir=\"auto\">.opencode/plugin</code> directory either in your project</li>\n<li>Or, globally in <code dir=\"auto\">~/.config/opencode/plugin</code></li>\n</ol>\n<hr>\n<h3 id=\"basic-structure\"><a href=\"#basic-structure\">Basic structure</a></h3>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/docs/_astro/ec.4c0k7.css\"><script type=\"module\" src=\"/docs/_astro/ec.p1z7b.js\"></script><figure class=\"frame has-title not-content\"><figcaption class=\"header\"><span class=\"title\">.opencode/plugin/example.js</span></figcaption><pre data-language=\"js\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#BF3441;--1:#F97583\">export</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#BF3441;--1:#F97583\">const</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#6F42C1;--1:#B392F0\">MyPlugin</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#BF3441;--1:#F97583\">=</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#BF3441;--1:#F97583\">async</span><span style=\"--0:#24292E;--1:#E1E4E8\"> ({ </span><span style=\"--0:#AE4B07;--1:#FFAB70\">project</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#AE4B07;--1:#FFAB70\">client</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#AE4B07;--1:#FFAB70\">$</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#AE4B07;--1:#FFAB70\">directory</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#AE4B07;--1:#FFAB70\">worktree</span><span style=\"--0:#24292E;--1:#E1E4E8\"> }) </span><span style=\"--0:#BF3441;--1:#F97583\">=></span><span style=\"--0:#24292E;--1:#E1E4E8\"> {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">console.</span><span style=\"--0:#6F42C1;--1:#B392F0\">log</span><span style=\"--0:#24292E;--1:#E1E4E8\">(</span><span style=\"--0:#032F62;--1:#9ECBFF\">\"Plugin initialized!\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">)</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#BF3441;--1:#F97583\">return</span><span style=\"--0:#24292E;--1:#E1E4E8\"> {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#616972;--1:#99A0A6\">// Hook implementations go here</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"export const MyPlugin = async ({ project, client, $, directory, worktree }) => {  console.log(&#x22;Plugin initialized!&#x22;)  return {    // Hook implementations go here  }}\"><div></div></button></div></figure></div>\n<p>The plugin function receives:</p>\n<ul>\n<li><code dir=\"auto\">project</code>: The current project information.</li>\n<li><code dir=\"auto\">directory</code>: The current working directory.</li>\n<li><code dir=\"auto\">worktree</code>: The git worktree path.</li>\n<li><code dir=\"auto\">client</code>: An opencode SDK client for interacting with the AI.</li>\n<li><code dir=\"auto\">$</code>: Bun’s <a href=\"https://bun.com/docs/runtime/shell\">shell API</a> for executing commands.</li>\n</ul>\n<hr>\n<h3 id=\"typescript-support\"><a href=\"#typescript-support\">TypeScript support</a></h3>\n<p>For TypeScript plugins, you can import types from the plugin package:</p>\n<div class=\"expressive-code\"><figure class=\"frame has-title not-content\"><figcaption class=\"header\"><span class=\"title\">my-plugin.ts</span></figcaption><pre data-language=\"ts\"><code><div class=\"ec-line highlight mark\"><div class=\"code\"><span style=\"--0:#8f2731;--1:#fb9fa9\">import</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#8f2731;--1:#fb9fa9\">type</span><span style=\"--0:#24292E;--1:#E1E4E8\"> { Plugin } </span><span style=\"--0:#8f2731;--1:#fb9fa9\">from</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"@opencode-ai/plugin\"</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#BF3441;--1:#F97583\">export</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#BF3441;--1:#F97583\">const</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#6F42C1;--1:#B392F0\">MyPlugin</span><span style=\"--0:#BF3441;--1:#F97583\">:</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#6F42C1;--1:#B392F0\">Plugin</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#BF3441;--1:#F97583\">=</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#BF3441;--1:#F97583\">async</span><span style=\"--0:#24292E;--1:#E1E4E8\"> ({ </span><span style=\"--0:#AE4B07;--1:#FFAB70\">project</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#AE4B07;--1:#FFAB70\">client</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#AE4B07;--1:#FFAB70\">$</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#AE4B07;--1:#FFAB70\">directory</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#AE4B07;--1:#FFAB70\">worktree</span><span style=\"--0:#24292E;--1:#E1E4E8\"> }) </span><span style=\"--0:#BF3441;--1:#F97583\">=></span><span style=\"--0:#24292E;--1:#E1E4E8\"> {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#BF3441;--1:#F97583\">return</span><span style=\"--0:#24292E;--1:#E1E4E8\"> {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#616972;--1:#99A0A6\">// Type-safe hook implementations</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import type { Plugin } from &#x22;@opencode-ai/plugin&#x22;export const MyPlugin: Plugin = async ({ project, client, $, directory, worktree }) => {  return {    // Type-safe hook implementations  }}\"><div></div></button></div></figure></div>\n<hr>\n<h2 id=\"examples\"><a href=\"#examples\">Examples</a></h2>\n<p>Here are some examples of plugins you can use to extend opencode.</p>\n<hr>\n<h3 id=\"send-notifications\"><a href=\"#send-notifications\">Send notifications</a></h3>\n<p>Send notifications when certain events occur:</p>\n<div class=\"expressive-code\"><figure class=\"frame has-title not-content\"><figcaption class=\"header\"><span class=\"title\">.opencode/plugin/notification.js</span></figcaption><pre data-language=\"js\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#BF3441;--1:#F97583\">export</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#BF3441;--1:#F97583\">const</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#6F42C1;--1:#B392F0\">NotificationPlugin</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#BF3441;--1:#F97583\">=</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#BF3441;--1:#F97583\">async</span><span style=\"--0:#24292E;--1:#E1E4E8\"> ({ </span><span style=\"--0:#AE4B07;--1:#FFAB70\">project</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#AE4B07;--1:#FFAB70\">client</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#AE4B07;--1:#FFAB70\">$</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#AE4B07;--1:#FFAB70\">directory</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#AE4B07;--1:#FFAB70\">worktree</span><span style=\"--0:#24292E;--1:#E1E4E8\"> }) </span><span style=\"--0:#BF3441;--1:#F97583\">=></span><span style=\"--0:#24292E;--1:#E1E4E8\"> {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#BF3441;--1:#F97583\">return</span><span style=\"--0:#24292E;--1:#E1E4E8\"> {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#6F42C1;--1:#B392F0\">event</span><span style=\"--0:#24292E;--1:#E1E4E8\">: </span><span style=\"--0:#BF3441;--1:#F97583\">async</span><span style=\"--0:#24292E;--1:#E1E4E8\"> ({ </span><span style=\"--0:#AE4B07;--1:#FFAB70\">event</span><span style=\"--0:#24292E;--1:#E1E4E8\"> }) </span><span style=\"--0:#BF3441;--1:#F97583\">=></span><span style=\"--0:#24292E;--1:#E1E4E8\"> {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">      </span><span style=\"--0:#616972;--1:#99A0A6\">// Send notification on session completion</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">      </span><span style=\"--0:#BF3441;--1:#F97583\">if</span><span style=\"--0:#24292E;--1:#E1E4E8\"> (event.type </span><span style=\"--0:#BF3441;--1:#F97583\">===</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"session.idle\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">) {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#BF3441;--1:#F97583\">await</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#6F42C1;--1:#B392F0\">$</span><span style=\"--0:#032F62;--1:#9ECBFF\">`osascript -e 'display notification \"Session completed!\" with title \"opencode\"'`</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">      </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">    </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">},</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"export const NotificationPlugin = async ({ project, client, $, directory, worktree }) => {  return {    event: async ({ event }) => {      // Send notification on session completion      if (event.type === &#x22;session.idle&#x22;) {        await $&#x60;osascript -e &#x27;display notification &#x22;Session completed!&#x22; with title &#x22;opencode&#x22;&#x27;&#x60;      }    },  }}\"><div></div></button></div></figure></div>\n<p>We are using <code dir=\"auto\">osascript</code> to run AppleScript on macOS. Here we are using it to send notifications.</p>\n<hr>\n<h3 id=\"env-protection\"><a href=\"#env-protection\">.env protection</a></h3>\n<p>Prevent opencode from reading <code dir=\"auto\">.env</code> files:</p>\n<div class=\"expressive-code\"><figure class=\"frame has-title not-content\"><figcaption class=\"header\"><span class=\"title\">.opencode/plugin/env-protection.js</span></figcaption><pre data-language=\"javascript\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#BF3441;--1:#F97583\">export</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#BF3441;--1:#F97583\">const</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#6F42C1;--1:#B392F0\">EnvProtection</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#BF3441;--1:#F97583\">=</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#BF3441;--1:#F97583\">async</span><span style=\"--0:#24292E;--1:#E1E4E8\"> ({ </span><span style=\"--0:#AE4B07;--1:#FFAB70\">project</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#AE4B07;--1:#FFAB70\">client</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#AE4B07;--1:#FFAB70\">$</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#AE4B07;--1:#FFAB70\">directory</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#AE4B07;--1:#FFAB70\">worktree</span><span style=\"--0:#24292E;--1:#E1E4E8\"> }) </span><span style=\"--0:#BF3441;--1:#F97583\">=></span><span style=\"--0:#24292E;--1:#E1E4E8\"> {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#BF3441;--1:#F97583\">return</span><span style=\"--0:#24292E;--1:#E1E4E8\"> {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"tool.execute.before\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">: </span><span style=\"--0:#BF3441;--1:#F97583\">async</span><span style=\"--0:#24292E;--1:#E1E4E8\"> (</span><span style=\"--0:#AE4B07;--1:#FFAB70\">input</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#AE4B07;--1:#FFAB70\">output</span><span style=\"--0:#24292E;--1:#E1E4E8\">) </span><span style=\"--0:#BF3441;--1:#F97583\">=></span><span style=\"--0:#24292E;--1:#E1E4E8\"> {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">      </span><span style=\"--0:#BF3441;--1:#F97583\">if</span><span style=\"--0:#24292E;--1:#E1E4E8\"> (input.tool </span><span style=\"--0:#BF3441;--1:#F97583\">===</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"read\"</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#BF3441;--1:#F97583\">&#x26;&#x26;</span><span style=\"--0:#24292E;--1:#E1E4E8\"> output.args.filePath.</span><span style=\"--0:#6F42C1;--1:#B392F0\">includes</span><span style=\"--0:#24292E;--1:#E1E4E8\">(</span><span style=\"--0:#032F62;--1:#9ECBFF\">\".env\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">)) {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#BF3441;--1:#F97583\">throw</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#BF3441;--1:#F97583\">new</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#6F42C1;--1:#B392F0\">Error</span><span style=\"--0:#24292E;--1:#E1E4E8\">(</span><span style=\"--0:#032F62;--1:#9ECBFF\">\"Do not read .env files\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">      </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">    </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">},</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"export const EnvProtection = async ({ project, client, $, directory, worktree }) => {  return {    &#x22;tool.execute.before&#x22;: async (input, output) => {      if (input.tool === &#x22;read&#x22; &#x26;&#x26; output.args.filePath.includes(&#x22;.env&#x22;)) {        throw new Error(&#x22;Do not read .env files&#x22;)      }    },  }}\"><div></div></button></div></figure></div>\n<hr>\n<h3 id=\"custom-tools\"><a href=\"#custom-tools\">Custom tools</a></h3>\n<p>Plugins can also add custom tools to opencode:</p>\n<div class=\"expressive-code\"><figure class=\"frame has-title not-content\"><figcaption class=\"header\"><span class=\"title\">.opencode/plugin/custom-tools.ts</span></figcaption><pre data-language=\"ts\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#BF3441;--1:#F97583\">import</span><span style=\"--0:#24292E;--1:#E1E4E8\"> { </span><span style=\"--0:#BF3441;--1:#F97583\">type</span><span style=\"--0:#24292E;--1:#E1E4E8\"> Plugin, tool } </span><span style=\"--0:#BF3441;--1:#F97583\">from</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"@opencode-ai/plugin\"</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#BF3441;--1:#F97583\">export</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#BF3441;--1:#F97583\">const</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#6F42C1;--1:#B392F0\">CustomToolsPlugin</span><span style=\"--0:#BF3441;--1:#F97583\">:</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#6F42C1;--1:#B392F0\">Plugin</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#BF3441;--1:#F97583\">=</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#BF3441;--1:#F97583\">async</span><span style=\"--0:#24292E;--1:#E1E4E8\"> (</span><span style=\"--0:#AE4B07;--1:#FFAB70\">ctx</span><span style=\"--0:#24292E;--1:#E1E4E8\">) </span><span style=\"--0:#BF3441;--1:#F97583\">=></span><span style=\"--0:#24292E;--1:#E1E4E8\"> {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#BF3441;--1:#F97583\">return</span><span style=\"--0:#24292E;--1:#E1E4E8\"> {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">    </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">tool: {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">      </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">mytool: </span><span style=\"--0:#6F42C1;--1:#B392F0\">tool</span><span style=\"--0:#24292E;--1:#E1E4E8\">({</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">        </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">description: </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"This is a custom tool\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">        </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">args: {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">          </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">foo: tool.schema.</span><span style=\"--0:#6F42C1;--1:#B392F0\">string</span><span style=\"--0:#24292E;--1:#E1E4E8\">(),</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">        </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">},</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#BF3441;--1:#F97583\">async</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#6F42C1;--1:#B392F0\">execute</span><span style=\"--0:#24292E;--1:#E1E4E8\">(</span><span style=\"--0:#AE4B07;--1:#FFAB70\">args</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#AE4B07;--1:#FFAB70\">ctx</span><span style=\"--0:#24292E;--1:#E1E4E8\">) {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">          </span><span style=\"--0:#BF3441;--1:#F97583\">return</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#032F62;--1:#9ECBFF\">`Hello ${</span><span style=\"--0:#24292E;--1:#E1E4E8\">args</span><span style=\"--0:#032F62;--1:#9ECBFF\">.</span><span style=\"--0:#24292E;--1:#E1E4E8\">foo</span><span style=\"--0:#032F62;--1:#9ECBFF\">}!`</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">        </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">},</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">      </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">}),</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">    </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">},</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#24292E;--1:#E1E4E8\">  </span></span><span style=\"--0:#24292E;--1:#E1E4E8\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import { type Plugin, tool } from &#x22;@opencode-ai/plugin&#x22;export const CustomToolsPlugin: Plugin = async (ctx) => {  return {    tool: {      mytool: tool({        description: &#x22;This is a custom tool&#x22;,        args: {          foo: tool.schema.string(),        },        async execute(args, ctx) {          return &#x60;Hello ${args.foo}!&#x60;        },      }),    },  }}\"><div></div></button></div></figure></div>\n<p>The <code dir=\"auto\">tool</code> helper creates a custom tool that opencode can call. It takes a Zod schema function and returns a tool definition with:</p>\n<ul>\n<li><code dir=\"auto\">description</code>: What the tool does</li>\n<li><code dir=\"auto\">args</code>: Zod schema for the tool’s arguments</li>\n<li><code dir=\"auto\">execute</code>: Function that runs when the tool is called</li>\n</ul>\n<p>Your custom tools will be available to opencode alongside built-in tools.</p>"
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? createVNode(MDXLayout, {
    ...props,
    children: createVNode(_createMdxContent, {
      ...props
    })
  }) : _createMdxContent(props);
}
function _missingMdxReference(id, component) {
  throw new Error("Expected " + ("component" ) + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
const url = "src/content/docs/plugins.mdx";
const file = "/home/josh/projects/sst/opencode/packages/web/src/content/docs/plugins.mdx";
const Content = (props = {}) => MDXContent({
  ...props,
  components: { Fragment: Fragment, ...props.components, },
});
Content[Symbol.for('mdx-component')] = true;
Content[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter.layout);
Content.moduleId = "/home/josh/projects/sst/opencode/packages/web/src/content/docs/plugins.mdx";
__astro_tag_component__(Content, 'astro:jsx');

export { Content, Content as default, file, frontmatter, getHeadings, url };
