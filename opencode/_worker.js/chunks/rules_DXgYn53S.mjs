globalThis.process ??= {}; globalThis.process.env ??= {};
import { d as createVNode, F as Fragment, _ as __astro_tag_component__ } from './astro/server_BfFDGVc7.mjs';

const frontmatter = {
  "title": "Rules",
  "description": "Set custom instructions for opencode."
};
function getHeadings() {
  return [{
    "depth": 2,
    "slug": "initialize",
    "text": "Initialize"
  }, {
    "depth": 2,
    "slug": "example",
    "text": "Example"
  }, {
    "depth": 2,
    "slug": "types",
    "text": "Types"
  }, {
    "depth": 3,
    "slug": "project",
    "text": "Project"
  }, {
    "depth": 3,
    "slug": "global",
    "text": "Global"
  }, {
    "depth": 2,
    "slug": "precedence",
    "text": "Precedence"
  }, {
    "depth": 2,
    "slug": "custom-instructions",
    "text": "Custom Instructions"
  }, {
    "depth": 2,
    "slug": "referencing-external-files",
    "text": "Referencing External Files"
  }, {
    "depth": 3,
    "slug": "using-opencodejson",
    "text": "Using opencode.json"
  }, {
    "depth": 3,
    "slug": "manual-instructions-in-agentsmd",
    "text": "Manual Instructions in AGENTS.md"
  }];
}
function _createMdxContent(props) {
  const {Fragment} = props.components || ({});
  if (!Fragment) _missingMdxReference("Fragment");
  return createVNode(Fragment, {
    "set:html": "<p>You can provide custom instructions to opencode by creating an <code dir=\"auto\">AGENTS.md</code> file. This is similar to <code dir=\"auto\">CLAUDE.md</code> or Cursor’s rules. It contains instructions that will be included in the LLM’s context to customize its behavior for your specific project.</p>\n<hr>\n<h2 id=\"initialize\"><a href=\"#initialize\">Initialize</a></h2>\n<p>To create a new <code dir=\"auto\">AGENTS.md</code> file, you can run the <code dir=\"auto\">/init</code> command in opencode.</p>\n<aside aria-label=\"Tip\" class=\"starlight-aside starlight-aside--tip\"><p class=\"starlight-aside__title\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"starlight-aside__icon\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1.43909 8.85483L1.44039 8.85354L4.96668 5.33815C5.30653 4.99386 5.7685 4.79662 6.2524 4.78972L6.26553 4.78963L12.9014 4.78962L13.8479 3.84308C16.9187 0.772319 20.0546 0.770617 21.4678 0.975145C21.8617 1.02914 22.2271 1.21053 22.5083 1.4917C22.7894 1.77284 22.9708 2.13821 23.0248 2.53199C23.2294 3.94517 23.2278 7.08119 20.1569 10.1521L19.2107 11.0983V17.7338L19.2106 17.7469C19.2037 18.2308 19.0067 18.6933 18.6624 19.0331L15.1456 22.5608C14.9095 22.7966 14.6137 22.964 14.29 23.0449C13.9663 23.1259 13.6267 23.1174 13.3074 23.0204C12.9881 22.9235 12.7011 22.7417 12.4771 22.4944C12.2533 22.2473 12.1006 21.9441 12.0355 21.6171L11.1783 17.3417L6.65869 12.822L4.34847 12.3589L2.38351 11.965C2.05664 11.8998 1.75272 11.747 1.50564 11.5232C1.25835 11.2992 1.07653 11.0122 0.979561 10.6929C0.882595 10.3736 0.874125 10.034 0.955057 9.7103C1.03599 9.38659 1.20328 9.09092 1.43909 8.85483ZM6.8186 10.8724L2.94619 10.096L6.32006 6.73268H10.9583L6.8186 10.8724ZM15.2219 5.21703C17.681 2.75787 20.0783 2.75376 21.1124 2.8876C21.2462 3.92172 21.2421 6.31895 18.783 8.77812L12.0728 15.4883L8.51172 11.9272L15.2219 5.21703ZM13.9042 21.0538L13.1279 17.1811L17.2676 13.0414V17.68L13.9042 21.0538Z\"></path><path d=\"M9.31827 18.3446C9.45046 17.8529 9.17864 17.3369 8.68945 17.1724C8.56178 17.1294 8.43145 17.1145 8.30512 17.1243C8.10513 17.1398 7.91519 17.2172 7.76181 17.3434C7.62613 17.455 7.51905 17.6048 7.45893 17.7835C6.97634 19.2186 5.77062 19.9878 4.52406 20.4029C4.08525 20.549 3.6605 20.644 3.29471 20.7053C3.35607 20.3395 3.45098 19.9148 3.59711 19.476C4.01221 18.2294 4.78141 17.0237 6.21648 16.5411C6.39528 16.481 6.54504 16.3739 6.65665 16.2382C6.85126 16.0016 6.92988 15.678 6.84417 15.3647C6.83922 15.3466 6.83373 15.3286 6.82767 15.3106C6.74106 15.053 6.55701 14.8557 6.33037 14.7459C6.10949 14.6389 5.84816 14.615 5.59715 14.6994C5.47743 14.7397 5.36103 14.7831 5.24786 14.8294C3.22626 15.6569 2.2347 17.4173 1.75357 18.8621C1.49662 19.6337 1.36993 20.3554 1.30679 20.8818C1.27505 21.1464 1.25893 21.3654 1.25072 21.5213C1.24662 21.5993 1.24448 21.6618 1.24337 21.7066L1.243 21.7226L1.24235 21.7605L1.2422 21.7771L1.24217 21.7827L1.24217 21.7856C1.24217 22.3221 1.67703 22.7579 2.2137 22.7579L2.2155 22.7579L2.22337 22.7578L2.23956 22.7577C2.25293 22.7575 2.27096 22.7572 2.29338 22.7567C2.33821 22.7555 2.40073 22.7534 2.47876 22.7493C2.63466 22.7411 2.85361 22.725 3.11822 22.6932C3.64462 22.6301 4.36636 22.5034 5.13797 22.2464C6.58274 21.7653 8.3431 20.7738 9.17063 18.7522C9.21696 18.639 9.26037 18.5226 9.30064 18.4029C9.30716 18.3835 9.31304 18.364 9.31827 18.3446Z\"></path></svg>Tip</p><div class=\"starlight-aside__content\"><p>You should commit your project’s <code dir=\"auto\">AGENTS.md</code> file to Git.</p></div></aside>\n<p>This will scan your project and all its contents to understand what the project is about and generate an <code dir=\"auto\">AGENTS.md</code> file with it. This helps opencode to navigate the project better.</p>\n<p>If you have an existing <code dir=\"auto\">AGENTS.md</code> file, this will try to add to it.</p>\n<hr>\n<h2 id=\"example\"><a href=\"#example\">Example</a></h2>\n<p>You can also just create this file manually. Here’s an example of some things you can put into an <code dir=\"auto\">AGENTS.md</code> file.</p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/docs/_astro/ec.4c0k7.css\"><script type=\"module\" src=\"/docs/_astro/ec.p1z7b.js\"></script><figure class=\"frame has-title not-content\"><figcaption class=\"header\"><span class=\"title\">AGENTS.md</span></figcaption><pre data-language=\"markdown\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#005CC5;--0fw:bold;--1:#79B8FF;--1fw:bold\"># SST v3 Monorepo Project</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">This is an SST v3 monorepo with TypeScript. The project uses bun workspaces for package management.</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#005CC5;--0fw:bold;--1:#79B8FF;--1fw:bold\">## Project Structure</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#AE4B07;--1:#FFAB70\">-</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#005CC5;--1:#79B8FF\">`packages/`</span><span style=\"--0:#24292E;--1:#E1E4E8\"> - Contains all workspace packages (functions, core, web, etc.)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#AE4B07;--1:#FFAB70\">-</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#005CC5;--1:#79B8FF\">`infra/`</span><span style=\"--0:#24292E;--1:#E1E4E8\"> - Infrastructure definitions split by service (storage.ts, api.ts, web.ts)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#AE4B07;--1:#FFAB70\">-</span><span style=\"--0:#24292E;--1:#E1E4E8\"> </span><span style=\"--0:#005CC5;--1:#79B8FF\">`sst.config.ts`</span><span style=\"--0:#24292E;--1:#E1E4E8\"> - Main SST configuration with dynamic imports</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#005CC5;--0fw:bold;--1:#79B8FF;--1fw:bold\">## Code Standards</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#AE4B07;--1:#FFAB70\">-</span><span style=\"--0:#24292E;--1:#E1E4E8\"> Use TypeScript with strict mode enabled</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#AE4B07;--1:#FFAB70\">-</span><span style=\"--0:#24292E;--1:#E1E4E8\"> Shared code goes in </span><span style=\"--0:#005CC5;--1:#79B8FF\">`packages/core/`</span><span style=\"--0:#24292E;--1:#E1E4E8\"> with proper exports configuration</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#AE4B07;--1:#FFAB70\">-</span><span style=\"--0:#24292E;--1:#E1E4E8\"> Functions go in </span><span style=\"--0:#005CC5;--1:#79B8FF\">`packages/functions/`</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#AE4B07;--1:#FFAB70\">-</span><span style=\"--0:#24292E;--1:#E1E4E8\"> Infrastructure should be split into logical files in </span><span style=\"--0:#005CC5;--1:#79B8FF\">`infra/`</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#005CC5;--0fw:bold;--1:#79B8FF;--1fw:bold\">## Monorepo Conventions</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#AE4B07;--1:#FFAB70\">-</span><span style=\"--0:#24292E;--1:#E1E4E8\"> Import shared modules using workspace names: </span><span style=\"--0:#005CC5;--1:#79B8FF\">`@my-app/core/example`</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"# SST v3 Monorepo ProjectThis is an SST v3 monorepo with TypeScript. The project uses bun workspaces for package management.## Project Structure- &#x60;packages/&#x60; - Contains all workspace packages (functions, core, web, etc.)- &#x60;infra/&#x60; - Infrastructure definitions split by service (storage.ts, api.ts, web.ts)- &#x60;sst.config.ts&#x60; - Main SST configuration with dynamic imports## Code Standards- Use TypeScript with strict mode enabled- Shared code goes in &#x60;packages/core/&#x60; with proper exports configuration- Functions go in &#x60;packages/functions/&#x60;- Infrastructure should be split into logical files in &#x60;infra/&#x60;## Monorepo Conventions- Import shared modules using workspace names: &#x60;@my-app/core/example&#x60;\"><div></div></button></div></figure></div>\n<p>We are adding project-specific instructions here and this will be shared across your team.</p>\n<hr>\n<h2 id=\"types\"><a href=\"#types\">Types</a></h2>\n<p>opencode also supports reading the <code dir=\"auto\">AGENTS.md</code> file from multiple locations. And this serves different purposes.</p>\n<h3 id=\"project\"><a href=\"#project\">Project</a></h3>\n<p>The ones we have seen above, where the <code dir=\"auto\">AGENTS.md</code> is placed in the project root, are project-specific rules. These only apply when you are working in this directory or its sub-directories.</p>\n<h3 id=\"global\"><a href=\"#global\">Global</a></h3>\n<p>You can also have global rules in a <code dir=\"auto\">~/.config/opencode/AGENTS.md</code> file. This gets applied across all opencode sessions.</p>\n<p>Since this isn’t committed to Git or shared with your team, we recommend using this to specify any personal rules that the LLM should follow.</p>\n<hr>\n<h2 id=\"precedence\"><a href=\"#precedence\">Precedence</a></h2>\n<p>So when opencode starts, it looks for:</p>\n<ol>\n<li><strong>Local files</strong> by traversing up from the current directory</li>\n<li><strong>Global file</strong> by checking <code dir=\"auto\">~/.config/opencode/AGENTS.md</code></li>\n</ol>\n<p>If you have both global and project-specific rules, opencode will combine them together.</p>\n<hr>\n<h2 id=\"custom-instructions\"><a href=\"#custom-instructions\">Custom Instructions</a></h2>\n<p>You can specify custom instruction files in your <code dir=\"auto\">opencode.json</code> or the global <code dir=\"auto\">~/.config/opencode/opencode.json</code>. This allows you and your team to reuse existing rules rather than having to duplicate them to AGENTS.md.</p>\n<p>Example:</p>\n<div class=\"expressive-code\"><figure class=\"frame has-title not-content\"><figcaption class=\"header\"><span class=\"title\">opencode.json</span></figcaption><pre data-language=\"json\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#005CC5;--1:#79B8FF\">\"$schema\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">: </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"https://opencode.ai/config.json\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#005CC5;--1:#79B8FF\">\"instructions\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">: [</span><span style=\"--0:#032F62;--1:#9ECBFF\">\"CONTRIBUTING.md\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"docs/guidelines.md\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#032F62;--1:#9ECBFF\">\".cursor/rules/*.md\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">]</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"{  &#x22;$schema&#x22;: &#x22;https://opencode.ai/config.json&#x22;,  &#x22;instructions&#x22;: [&#x22;CONTRIBUTING.md&#x22;, &#x22;docs/guidelines.md&#x22;, &#x22;.cursor/rules/*.md&#x22;]}\"><div></div></button></div></figure></div>\n<p>All instruction files are combined with your <code dir=\"auto\">AGENTS.md</code> files.</p>\n<hr>\n<h2 id=\"referencing-external-files\"><a href=\"#referencing-external-files\">Referencing External Files</a></h2>\n<p>While opencode doesn’t automatically parse file references in <code dir=\"auto\">AGENTS.md</code>, you can achieve similar functionality in two ways:</p>\n<h3 id=\"using-opencodejson\"><a href=\"#using-opencodejson\">Using opencode.json</a></h3>\n<p>The recommended approach is to use the <code dir=\"auto\">instructions</code> field in <code dir=\"auto\">opencode.json</code>:</p>\n<div class=\"expressive-code\"><figure class=\"frame has-title not-content\"><figcaption class=\"header\"><span class=\"title\">opencode.json</span></figcaption><pre data-language=\"json\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#005CC5;--1:#79B8FF\">\"$schema\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">: </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"https://opencode.ai/config.json\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#005CC5;--1:#79B8FF\">\"instructions\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">: [</span><span style=\"--0:#032F62;--1:#9ECBFF\">\"docs/development-standards.md\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"test/testing-guidelines.md\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">, </span><span style=\"--0:#032F62;--1:#9ECBFF\">\"packages/*/AGENTS.md\"</span><span style=\"--0:#24292E;--1:#E1E4E8\">]</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"{  &#x22;$schema&#x22;: &#x22;https://opencode.ai/config.json&#x22;,  &#x22;instructions&#x22;: [&#x22;docs/development-standards.md&#x22;, &#x22;test/testing-guidelines.md&#x22;, &#x22;packages/*/AGENTS.md&#x22;]}\"><div></div></button></div></figure></div>\n<h3 id=\"manual-instructions-in-agentsmd\"><a href=\"#manual-instructions-in-agentsmd\">Manual Instructions in AGENTS.md</a></h3>\n<p>You can teach opencode to read external files by providing explicit instructions in your <code dir=\"auto\">AGENTS.md</code>. Here’s a practical example:</p>\n<div class=\"expressive-code\"><figure class=\"frame has-title not-content\"><figcaption class=\"header\"><span class=\"title\">AGENTS.md</span></figcaption><pre data-language=\"markdown\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#005CC5;--0fw:bold;--1:#79B8FF;--1fw:bold\"># TypeScript Project Rules</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#005CC5;--0fw:bold;--1:#79B8FF;--1fw:bold\">## External File Loading</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">CRITICAL: When you encounter a file reference (e.g., @rules/general.md), use your Read tool to load it on a need-to-know basis. They're relevant to the SPECIFIC task at hand.</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">Instructions:</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#AE4B07;--1:#FFAB70\">-</span><span style=\"--0:#24292E;--1:#E1E4E8\"> Do NOT preemptively load all references - use lazy loading based on actual need</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#AE4B07;--1:#FFAB70\">-</span><span style=\"--0:#24292E;--1:#E1E4E8\"> When loaded, treat content as mandatory instructions that override defaults</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#AE4B07;--1:#FFAB70\">-</span><span style=\"--0:#24292E;--1:#E1E4E8\"> Follow references recursively when needed</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#005CC5;--0fw:bold;--1:#79B8FF;--1fw:bold\">## Development Guidelines</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">For TypeScript code style and best practices: @docs/typescript-guidelines.md</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">For React component architecture and hooks patterns: @docs/react-patterns.md</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">For REST API design and error handling: @docs/api-standards.md</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">For testing strategies and coverage requirements: @test/testing-guidelines.md</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#005CC5;--0fw:bold;--1:#79B8FF;--1fw:bold\">## General Guidelines</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#24292E;--1:#E1E4E8\">Read the following file immediately as it's relevant to all workflows: @rules/general-guidelines.md.</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"# TypeScript Project Rules## External File LoadingCRITICAL: When you encounter a file reference (e.g., @rules/general.md), use your Read tool to load it on a need-to-know basis. They&#x27;re relevant to the SPECIFIC task at hand.Instructions:- Do NOT preemptively load all references - use lazy loading based on actual need- When loaded, treat content as mandatory instructions that override defaults- Follow references recursively when needed## Development GuidelinesFor TypeScript code style and best practices: @docs/typescript-guidelines.mdFor React component architecture and hooks patterns: @docs/react-patterns.mdFor REST API design and error handling: @docs/api-standards.mdFor testing strategies and coverage requirements: @test/testing-guidelines.md## General GuidelinesRead the following file immediately as it&#x27;s relevant to all workflows: @rules/general-guidelines.md.\"><div></div></button></div></figure></div>\n<p>This approach allows you to:</p>\n<ul>\n<li>Create modular, reusable rule files</li>\n<li>Share rules across projects via symlinks or git submodules</li>\n<li>Keep AGENTS.md concise while referencing detailed guidelines</li>\n<li>Ensure opencode loads files only when needed for the specific task</li>\n</ul>\n<aside aria-label=\"Tip\" class=\"starlight-aside starlight-aside--tip\"><p class=\"starlight-aside__title\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"starlight-aside__icon\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1.43909 8.85483L1.44039 8.85354L4.96668 5.33815C5.30653 4.99386 5.7685 4.79662 6.2524 4.78972L6.26553 4.78963L12.9014 4.78962L13.8479 3.84308C16.9187 0.772319 20.0546 0.770617 21.4678 0.975145C21.8617 1.02914 22.2271 1.21053 22.5083 1.4917C22.7894 1.77284 22.9708 2.13821 23.0248 2.53199C23.2294 3.94517 23.2278 7.08119 20.1569 10.1521L19.2107 11.0983V17.7338L19.2106 17.7469C19.2037 18.2308 19.0067 18.6933 18.6624 19.0331L15.1456 22.5608C14.9095 22.7966 14.6137 22.964 14.29 23.0449C13.9663 23.1259 13.6267 23.1174 13.3074 23.0204C12.9881 22.9235 12.7011 22.7417 12.4771 22.4944C12.2533 22.2473 12.1006 21.9441 12.0355 21.6171L11.1783 17.3417L6.65869 12.822L4.34847 12.3589L2.38351 11.965C2.05664 11.8998 1.75272 11.747 1.50564 11.5232C1.25835 11.2992 1.07653 11.0122 0.979561 10.6929C0.882595 10.3736 0.874125 10.034 0.955057 9.7103C1.03599 9.38659 1.20328 9.09092 1.43909 8.85483ZM6.8186 10.8724L2.94619 10.096L6.32006 6.73268H10.9583L6.8186 10.8724ZM15.2219 5.21703C17.681 2.75787 20.0783 2.75376 21.1124 2.8876C21.2462 3.92172 21.2421 6.31895 18.783 8.77812L12.0728 15.4883L8.51172 11.9272L15.2219 5.21703ZM13.9042 21.0538L13.1279 17.1811L17.2676 13.0414V17.68L13.9042 21.0538Z\"></path><path d=\"M9.31827 18.3446C9.45046 17.8529 9.17864 17.3369 8.68945 17.1724C8.56178 17.1294 8.43145 17.1145 8.30512 17.1243C8.10513 17.1398 7.91519 17.2172 7.76181 17.3434C7.62613 17.455 7.51905 17.6048 7.45893 17.7835C6.97634 19.2186 5.77062 19.9878 4.52406 20.4029C4.08525 20.549 3.6605 20.644 3.29471 20.7053C3.35607 20.3395 3.45098 19.9148 3.59711 19.476C4.01221 18.2294 4.78141 17.0237 6.21648 16.5411C6.39528 16.481 6.54504 16.3739 6.65665 16.2382C6.85126 16.0016 6.92988 15.678 6.84417 15.3647C6.83922 15.3466 6.83373 15.3286 6.82767 15.3106C6.74106 15.053 6.55701 14.8557 6.33037 14.7459C6.10949 14.6389 5.84816 14.615 5.59715 14.6994C5.47743 14.7397 5.36103 14.7831 5.24786 14.8294C3.22626 15.6569 2.2347 17.4173 1.75357 18.8621C1.49662 19.6337 1.36993 20.3554 1.30679 20.8818C1.27505 21.1464 1.25893 21.3654 1.25072 21.5213C1.24662 21.5993 1.24448 21.6618 1.24337 21.7066L1.243 21.7226L1.24235 21.7605L1.2422 21.7771L1.24217 21.7827L1.24217 21.7856C1.24217 22.3221 1.67703 22.7579 2.2137 22.7579L2.2155 22.7579L2.22337 22.7578L2.23956 22.7577C2.25293 22.7575 2.27096 22.7572 2.29338 22.7567C2.33821 22.7555 2.40073 22.7534 2.47876 22.7493C2.63466 22.7411 2.85361 22.725 3.11822 22.6932C3.64462 22.6301 4.36636 22.5034 5.13797 22.2464C6.58274 21.7653 8.3431 20.7738 9.17063 18.7522C9.21696 18.639 9.26037 18.5226 9.30064 18.4029C9.30716 18.3835 9.31304 18.364 9.31827 18.3446Z\"></path></svg>Tip</p><div class=\"starlight-aside__content\"><p>For monorepos or projects with shared standards, using <code dir=\"auto\">opencode.json</code> with glob patterns (like <code dir=\"auto\">packages/*/AGENTS.md</code>) is more maintainable than manual instructions.</p></div></aside>"
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? createVNode(MDXLayout, {
    ...props,
    children: createVNode(_createMdxContent, {
      ...props
    })
  }) : _createMdxContent(props);
}
function _missingMdxReference(id, component) {
  throw new Error("Expected " + ("component" ) + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
const url = "src/content/docs/rules.mdx";
const file = "/home/josh/projects/sst/opencode/packages/web/src/content/docs/rules.mdx";
const Content = (props = {}) => MDXContent({
  ...props,
  components: { Fragment: Fragment, ...props.components, },
});
Content[Symbol.for('mdx-component')] = true;
Content[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter.layout);
Content.moduleId = "/home/josh/projects/sst/opencode/packages/web/src/content/docs/rules.mdx";
__astro_tag_component__(Content, 'astro:jsx');

export { Content, Content as default, file, frontmatter, getHeadings, url };
